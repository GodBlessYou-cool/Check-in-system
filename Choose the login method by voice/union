import speech_recognition as sr
import requests
from urllib.parse import urlparse, quote
import json
import os
import cv2
import numpy as np
from datetime import datetime
from dotenv import load_dotenv
from utils.aws_utils import get_config
from utils.face_utils import *

load_dotenv()
config = get_config()

class CustomerDataRetriever:
    def __init__(self):
        self.API_CONFIG = {
            'login_url': 'https://staging.stickie.link/api/v1/login',
            'member_data_url': 'https://staging.stickie.link/api/v1/membership/member_data',
            'membership_url': 'https://staging.stickie.link/api/v1/membership/data',
            'credentials': {
                'email': 'kishore@stickies.tech',
                'password': 'Abc123'
            },
            'token': None
        }
        self.session = requests.Session()

    def authenticate(self):
        """Authenticate with the API"""
        try:
            response = self.session.post(
                self.API_CONFIG['login_url'],
                headers={
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                json=self.API_CONFIG['credentials']
            )

            if not response.ok:
                error_data = response.json() if response.text else {}
                raise Exception(error_data.get('message', f'Authentication failed ({response.status_code})'))

            data = response.json()
            if not data.get('token'):
                raise Exception('No authentication token received')

            self.API_CONFIG['token'] = data['token']
            return True

        except Exception as e:
            raise Exception(f'Authentication error: {str(e)}')

    def extract_member_identifier(self, input_data):
        """Extract member identifier from bio link"""
        try:
            url = urlparse(input_data)
            path_segments = [seg for seg in url.path.split('/') if seg.strip()]

            for i, segment in enumerate(path_segments):
                if segment.lower() in ['bio-link', 'member'] and i + 1 < len(path_segments):
                    return path_segments[i + 1].split('?')[0]

            if path_segments:
                return path_segments[-1].split('?')[0]

            return None

        except:
            return None

    def get_member_data(self, identifier):
        """Get basic member information"""
        try:
            if not self.API_CONFIG['token']:
                self.authenticate()

            query_params = [
                f'link={quote(identifier)}',
                f'username={quote(identifier)}',
                f'id={quote(identifier)}',
                f'member_id={quote(identifier)}'
            ]

            for param in query_params:
                url = f"{self.API_CONFIG['membership_url']}?{param}"

                response = self.session.get(
                    url,
                    headers={
                        'Authorization': f"Bearer {self.API_CONFIG['token']}",
                        'Accept': 'application/json'
                    }
                )

                if response.ok:
                    data = response.json()
                    member = self.find_member_in_response(data, identifier)
                    if member:
                        return self.format_member_data(member)

            raise Exception('Member not found')

        except Exception as e:
            return {
                'error': True,
                'message': str(e)
            }

    def get_purchase_records(self, member_identifier):
        """Get purchase records for a member using GET request"""
        try:
            if not self.API_CONFIG['token']:
                self.authenticate()

            url = f"{self.API_CONFIG['member_data_url']}?link={quote(member_identifier)}"

            response = self.session.get(
                url,
                headers={
                    'Authorization': f"Bearer {self.API_CONFIG['token']}",
                    'Accept': 'application/json'
                }
            )

            if not response.ok:
                error_data = response.json() if response.text else {}
                raise Exception(error_data.get('message', f'API request failed ({response.status_code})'))

            data = response.json()
            return self.filter_purchase_data(data)

        except Exception as e:
            return {
                'error': True,
                'message': str(e)
            }

    def filter_purchase_data(self, data):
        """Extract relevant product information from purchase records and aggregate quantities"""
        if not data.get('data') or not data['data'].get('user'):
            return []

        orders = data['data']['user'].get('orders', [])
        product_totals = {}

        for order in orders:
            for product in order.get('order_products', []):
                product_info = product['product']
                product_name = product_info.get('name')
                quantity = product['product_quantity']
                last_shopping_date = order.get('paid_date')[:10]  # Format date to YYYY-MM-DD

                if product_name in product_totals:
                    product_totals[product_name]['quantity'] += quantity
                else:
                    product_totals[product_name] = {
                        'quantity': quantity,
                        'last_shopping_date': last_shopping_date
                    }

        # Convert the dictionary to a list of records for easier processing
        return [
            {'product_name': name, 'quantity': details['quantity'], 'last_shopping_date': details['last_shopping_date']}
            for name, details in product_totals.items()
        ]

    def find_member_in_response(self, data, identifier):
        """Find member in API response"""
        search_id = identifier.lower()
        candidates = []

        if data.get('data', {}).get('data'):
            candidates.extend(data['data']['data'])
        if isinstance(data.get('data'), list):
            candidates.extend(data['data'])
        if data.get('user_data'):
            candidates.append(data['user_data'])
        if data.get('data'):
            candidates.append(data['data'])

        for member in candidates:
            member_id = str(member.get('link') or member.get('username') or
                            member.get('id') or member.get('member_id') or '').lower()
            if search_id == member_id:
                return member

        return None

    def format_member_data(self, member):
        """Format member data for display"""
        user = member.get('user', {})
        return {
            'name': user.get('name') or member.get('name') or 'Not available',
            'email': user.get('email') or member.get('email') or 'Not provided',
            'phone': user.get('phone') or member.get('phone') or 'Not provided',
            'member_id': member.get('member_id') or member.get('id') or 'N/A',
            'tier': member.get('tier', {}).get('name') or 'Standard',
            'status': 'Active' if member.get('status') == 1 else 'Inactive',
            'join_date': member.get('created_at', 'Unknown')
        }

    def process_bio_link(self, bio_link):
        """Process a bio link and return complete member data"""
        try:
            identifier = self.extract_member_identifier(bio_link)
            if not identifier:
                return {'error': 'Invalid bio link format'}

            member_data = self.get_member_data(identifier)
            if isinstance(member_data, dict) and member_data.get('error'):
                return {'error': member_data['message']}

            return {
                'status': 'success',
                'member_data': member_data
            }

        except Exception as e:
            return {
                'status': 'error',
                'message': str(e)
            }


def capture_face_from_camera():
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("❌ Error: Could not open camera")
        return None

    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    print("\nLooking for faces... Face will be automatically captured when detected")

    captured_image = None
    face_detected_time = None
    capture_delay = 2

    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                print("❌ Failed to capture frame")
                break

            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
            faces = face_cascade.detectMultiScale(gray, 1.3, 5)
            current_time = datetime.now()

            if len(faces) > 0:
                if face_detected_time is None:
                    face_detected_time = current_time
                    print("Face detected! Preparing to capture...")

                if (current_time - face_detected_time).total_seconds() >= capture_delay:
                    x, y, w, h = max(faces, key=lambda f: f[2] * f[3])
                    captured_image = frame[y:y + h, x:x + w]
                    print("✅ Face captured automatically!")
                    break
            else:
                face_detected_time = None

            for (x, y, w, h) in faces:
                cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
                if face_detected_time:
                    time_left = capture_delay - (current_time - face_detected_time).total_seconds()
                    if time_left > 0:
                        cv2.putText(frame, f"Capturing in: {time_left:.1f}s", (x, y - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 0, 0), 2)

            cv2.imshow('Face Detection - Press ESC to quit', frame)
            if cv2.waitKey(1) == 27:
                break

    finally:
        cap.release()
        cv2.destroyAllWindows()

    if captured_image is not None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        image_path = f"captured_face_{timestamp}.jpg"
        cv2.imwrite(image_path, captured_image)
        return image_path
    return None


def login_to_stickie():
    url = "https://staging.stickie.link/api/v1/login"
    payload = {
        "email": "kishore@stickies.tech",
        "password": "Abc123"
    }
    try:
        res = requests.post(url, json=payload, timeout=10)
        res.raise_for_status()
        return res.json().get("token")
    except Exception as e:
        print(f"❌ Login failed: {e}")
        return None


def get_all_membership_data(token):
    url = "https://staging.stickie.link/api/v1/membership/data"
    headers = {"Authorization": f"Bearer {token}"}
    try:
        res = requests.get(url, headers=headers, timeout=10)
        res.raise_for_status()
        return res.json().get('data', {}).get('data', [])
    except Exception as e:
        print(f"❌ Error fetching membership data: {e}")
        return None


def face_recognition_login():
    print("=== Face Recognition Login ===")
    image_path = capture_face_from_camera()
    if not image_path:
        print("❌ No face captured.")
        return

    try:
        image = cv2.imread(image_path)
        _, img_encoded = cv2.imencode('.jpg', image)
        image_bytes = img_encoded.tobytes()

        print("\n🔍 Matching face in AWS Rekognition...")
        match_response = search_face_in_collection(image_bytes, threshold=80)

        if match_response and match_response.get('FaceMatches'):
            face_id = match_response['FaceMatches'][0]['Face']['FaceId']
            confidence = match_response['FaceMatches'][0]['Similarity']
            print(f"✅ Face matched with {confidence:.2f}% confidence")

            customer = get_customer(face_id)
            if not customer:
                print("⚠️ Face found but no linked customer.")
                return

            name = customer.get('name', 'Unknown')
            member_id = customer.get('member_id')
            print(f"\n👋 Welcome, {name}")
            print(f"🆔 Face ID: {face_id}")
            print(f"🔗 Member ID: {member_id}")

            print("\n🔐 Logging in to Stickie...")
            token = login_to_stickie()
            if not token:
                return

            print("📡 Fetching membership info...")
            members = get_all_membership_data(token)
            if not members:
                print("⚠️ No membership data.")
                return

            for member in members:
                if str(member.get("member_id")) == str(member_id):
                    user = member.get("user", {})
                    link = user.get('link') or member.get('link') or member_id
                    print("\n📋 --- Membership Details ---")
                    print(f"Name: {user.get('name')}")
                    print(f"Email: {user.get('email')}")
                    print(f"Phone: {user.get('phone')}")
                    print(f"Tier: {member.get('tier', {}).get('name', 'Standard')}")
                    print(f"Link: {link}")

                    retriever = CustomerDataRetriever()
                    print("\n🧾 Fetching purchase summary...")
                    summary = retriever.get_purchase_records(link)

                    if isinstance(summary, dict) and summary.get('error'):
                        print(f"❌ Error: {summary['message']}")
                    else:
                        print("\n🛍️ --- Purchase Summary ---")
                        for record in summary:
                            product_name = record['product_name']
                            quantity = record['quantity']
                            last_shopping_date = record['last_shopping_date']
                            print(f"{product_name}: {quantity}, last shopping date: {last_shopping_date}")
                    break
        else:
            print("\n🙅 User not identified.")

    finally:
        if os.path.exists(image_path):
            os.remove(image_path)
            print(f"🗑️ Removed temp image {image_path}")


def qr_code_login():
    retriever = CustomerDataRetriever()
    while True:
        print("\nEnter a bio link (or 'quit' to exit):")
        bio_link = input().strip()

        if bio_link.lower() == 'quit':
            break

        try:
            print("Authenticating...")
            retriever.authenticate()
            print("Authentication successful")
        except Exception as e:
            print(f"Authentication failed: {e}")
            continue

        result = retriever.process_bio_link(bio_link)
        if result.get('status') == 'success':
            print("\n=== MEMBER INFORMATION ===")
            for key, value in result['member_data'].items():
                print(f"{key}: {value}")

            member_name = result['member_data']['name']
            print(f"\nRetrieving purchase records for {member_name}...")
            purchase_records = retriever.get_purchase_records(result['member_data']['member_id'])

            if isinstance(purchase_records, dict) and purchase_records.get('error'):
                print(f"Error retrieving purchase records: {purchase_records['message']}")
            else:
                print("\n=== PURCHASE RECORDS ===")
                for record in purchase_records:
                    product_name = record['product_name']
                    quantity = record['quantity']
                    last_shopping_date = record['last_shopping_date']
                    print(f"{product_name}: {quantity}, last shopping date: {last_shopping_date}")
        else:
            print(f"\nError: {result.get('message')}")


def get_voice_input():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Please say the login method you want to use (Face Recognition or QR Code):")
        audio = r.listen(source)

    try:
        text = r.recognize_google(audio, language='en-US')
        print(f"You said: {text}")
        return text
    except sr.UnknownValueError:
        print("Could not understand audio. Please say it again.")
        return None
    except sr.RequestError as e:
        print(f"Error occurred during the request; {e}")
        return None


def main():
    while True:
        voice_input = get_voice_input()
        if voice_input:
            voice_input = voice_input.lower()
            if "face recognition" in voice_input:
                face_recognition_login()
                break
            elif "qr code" in voice_input:
                qr_code_login()
                break
            else:
                print("No valid login method was recognized. Please say 'Face Recognition' or 'QR Code'.")


if __name__ == "__main__":
    main()